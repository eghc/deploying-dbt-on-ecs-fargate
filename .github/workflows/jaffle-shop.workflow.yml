  name: "Bulding and Updating dbt image on ECR"
  
  "on":
    push:
      branches:
        - main
      paths:
        - 'jaffle_shop/**'
        - 'infra-as-code/**'
    pull_request:
      branches:
        - main
      paths:
        - 'jaffle_shop/**'
        - 'infra-as-code/**'
  
  jobs:
    terraform-plan:
      name: 'terraform-plan'
      runs-on: ubuntu-latest
      env:
        AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        AWS_DEFAULT_REGION: us-east-1
        AWS_DEFAULT_OUTPUT: json
        ENV: dev
      outputs:
        output1: ${{env.PLAN_STATUS}}
      steps:
        - name: Checkout
          uses: actions/checkout@v3
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-region: ${{env.AWS_DEFAULT_REGION}}
  
        - name: Terraform Init
          id: init
          run: cd infra-as-code && terraform init --backend-config="bucket=gpassos-terraform-state-files"
  
        - name: Terraform Validate
          id: validate
          run: |
            cd infra-as-code 
            terraform validate -no-color
            terraform workspace select $ENV || terraform workspace new $ENV
  
        - name: Terraform Plan
          id: plan
          run: cd infra-as-code && terraform plan -out plan.tfplan
          continue-on-error: true
  
        - name: Terraform Plan Status
          run: |
            echo "PLAN_STATUS=failure" >> "$GITHUB_ENV"
            exit 1
  
        - name: Set Terraform Plan environment variable
          run: echo "PLAN_STATUS=success" >> "$GITHUB_ENV"

    terraform-apply:
      name: 'terraform-apply'
      runs-on: ubuntu-latest
      needs:
#        - environment-validation
        - terraform-plan
      env:
        AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        AWS_DEFAULT_REGION: us-east-1
        AWS_DEFAULT_OUTPUT: json
        PLAN_STATUS: ${{needs.terraform-plan.outputs.output1}}
        ENV: dev
      steps:
        - name: Check plan status
          if: env.PLAN_STATUS != 'success'
          run: |
            echo "The given terraform plan is not valid"
            exit 1

        - name: Checkout
          uses: actions/checkout@v3
  
        - name: Terraform Init
          id: init
          run: cd infra-as-code && terraform init --backend-config="bucket=gpassos-terraform-state-files"
  
        - name: Terraform Apply
          run: |
            cd infra-as-code
            terraform workspace select $ENV
            terraform plan
            terraform apply -auto-approve -input=false
  
    build-and-push-dbt-to-ecr:
      name: 'build-and-push-dbt-to-ecr'
      runs-on: ubuntu-latest
      env:
        AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        AWS_REGION: us-east-1
        AWS_DEFAULT_OUTPUT: json
        ENV: ${{needs.environment-validation.outputs.output5}}
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
  
        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: gpassos-jaffle-shop-${{ env.ENV }}-images-repository
            IMAGE_TAG: dbt-jaffle-shop-latest
          run: |
            docker build -f dbt.dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    publish-dbt-docs-on-s3:
      name: 'publish-dbt-docs-on-s3'
      runs-on: ubuntu-latest
      needs:
        - build-and-push-dbt-to-ecr
      env:
        AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        AWS_DEFAULT_REGION: us-east-1
        AWS_DEFAULT_OUTPUT: json
        SNF_ACCOUNT: ${{secrets.SNF_ACCOUNT}}
        SNF_USER: ${{secrets.SNF_USER}}
        SNF_PASSWORD: ${{secrets.SNF_PASSWORD}}
        SNF_ROLE: ${{secrets.SNF_ROLE}}
        SNF_WAREHOUSE: ${{secrets.SNF_WAREHOUSE}}
        SNF_DATABASE: ${{secrets.SNF_DATABASE}}
        SNF_SCHEMA: ${{secrets.SNF_SCHEMA}}
      steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-region: ${{env.AWS_DEFAULT_REGION}}

        - name: install dbt deps
          uses: mwhitaker/dbt-action@v1.3.0
          with:
            dbt_command: "dbt deps"
            dbt_project_folder: "./transformations"

        - name: dbt
          uses: mwhitaker/dbt-action@v1.3.0
          with:
            dbt_command: "dbt docs generate"
            dbt_project_folder: "./transformations"

        - name: Upload documentation to S3
          run: |
            aws s3 cp --recursive ./transformations/target s3://gpassos-jaflle-shop-${{ env.ENV }}-dbtdocs/